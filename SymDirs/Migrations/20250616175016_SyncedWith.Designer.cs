// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SymDirs.Db;

#nullable disable

namespace SymDirs.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20250616175016_SyncedWith")]
    partial class SyncedWith
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("SymDirs.Db.DbFile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("ByteSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<ulong?>("InodeNumber")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSynced")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("LastSync")
                        .HasColumnType("TEXT");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FullPath");

                    b.HasIndex("LastSync");

                    b.HasIndex("LastSync", "FullPath");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("SymDirs.Syncing.LocalDirectory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LocalDirectory");
                });

            modelBuilder.Entity("SymDirs.Syncing.SyncedConfigDirectory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("DbFileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSourceDirectory")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LocalDirectoryId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DbFileId");

                    b.HasIndex("LocalDirectoryId");

                    b.ToTable("SyncedConfigDirectory");
                });

            modelBuilder.Entity("SymDirs.Syncing.SyncedConfigParentDirectory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("SyncedConfigDirectoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("childPath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SyncedConfigDirectoryId");

                    b.ToTable("SyncedConfigParentDirectory");
                });

            modelBuilder.Entity("SymDirs.Syncing.SyncedConfigDirectory", b =>
                {
                    b.HasOne("SymDirs.Db.DbFile", null)
                        .WithMany("SyncedWith")
                        .HasForeignKey("DbFileId");

                    b.HasOne("SymDirs.Syncing.LocalDirectory", "LocalDirectory")
                        .WithMany()
                        .HasForeignKey("LocalDirectoryId");

                    b.Navigation("LocalDirectory");
                });

            modelBuilder.Entity("SymDirs.Syncing.SyncedConfigParentDirectory", b =>
                {
                    b.HasOne("SymDirs.Syncing.SyncedConfigDirectory", null)
                        .WithMany("LocatedIn")
                        .HasForeignKey("SyncedConfigDirectoryId");
                });

            modelBuilder.Entity("SymDirs.Db.DbFile", b =>
                {
                    b.Navigation("SyncedWith");
                });

            modelBuilder.Entity("SymDirs.Syncing.SyncedConfigDirectory", b =>
                {
                    b.Navigation("LocatedIn");
                });
#pragma warning restore 612, 618
        }
    }
}
